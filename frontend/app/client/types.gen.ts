// This file is auto-generated by @hey-api/openapi-ts

export type ConferenceCreate = {
    name: string;
    start_date?: string | null;
    end_date?: string | null;
    location?: string | null;
    website_url?: string | null;
    abstract_deadline?: string | null;
    paper_deadline?: string | null;
};

export type ConferencePublic = {
    name: string;
    start_date?: string | null;
    end_date?: string | null;
    location?: string | null;
    website_url?: string | null;
    abstract_deadline?: string | null;
    paper_deadline?: string | null;
    id: string;
};

export type ConferenceUpdate = {
    name: string;
    start_date?: string | null;
    end_date?: string | null;
    location?: string | null;
    website_url?: string | null;
    abstract_deadline?: string | null;
    paper_deadline?: string | null;
};

export type ConferencesPublic = {
    data: Array<ConferencePublic>;
    count: number;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ConferencesReadConferencesData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/api/v1/conferences/';
};

export type ConferencesReadConferencesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConferencesReadConferencesError = ConferencesReadConferencesErrors[keyof ConferencesReadConferencesErrors];

export type ConferencesReadConferencesResponses = {
    /**
     * Successful Response
     */
    200: ConferencesPublic;
};

export type ConferencesReadConferencesResponse = ConferencesReadConferencesResponses[keyof ConferencesReadConferencesResponses];

export type ConferencesCreateConferenceData = {
    body: ConferenceCreate;
    path?: never;
    query?: never;
    url: '/api/v1/conferences/';
};

export type ConferencesCreateConferenceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConferencesCreateConferenceError = ConferencesCreateConferenceErrors[keyof ConferencesCreateConferenceErrors];

export type ConferencesCreateConferenceResponses = {
    /**
     * Successful Response
     */
    200: ConferencePublic;
};

export type ConferencesCreateConferenceResponse = ConferencesCreateConferenceResponses[keyof ConferencesCreateConferenceResponses];

export type ConferencesDeleteConferenceData = {
    body?: never;
    path: {
        conference_id: string;
    };
    query?: never;
    url: '/api/v1/conferences/{conference_id}';
};

export type ConferencesDeleteConferenceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConferencesDeleteConferenceError = ConferencesDeleteConferenceErrors[keyof ConferencesDeleteConferenceErrors];

export type ConferencesDeleteConferenceResponses = {
    /**
     * Successful Response
     */
    200: ConferencePublic;
};

export type ConferencesDeleteConferenceResponse = ConferencesDeleteConferenceResponses[keyof ConferencesDeleteConferenceResponses];

export type ConferencesReadConferenceData = {
    body?: never;
    path: {
        conference_id: string;
    };
    query?: never;
    url: '/api/v1/conferences/{conference_id}';
};

export type ConferencesReadConferenceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConferencesReadConferenceError = ConferencesReadConferenceErrors[keyof ConferencesReadConferenceErrors];

export type ConferencesReadConferenceResponses = {
    /**
     * Successful Response
     */
    200: ConferencePublic;
};

export type ConferencesReadConferenceResponse = ConferencesReadConferenceResponses[keyof ConferencesReadConferenceResponses];

export type ConferencesUpdateConferenceData = {
    body: ConferenceUpdate;
    path: {
        conference_id: string;
    };
    query?: never;
    url: '/api/v1/conferences/{conference_id}';
};

export type ConferencesUpdateConferenceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConferencesUpdateConferenceError = ConferencesUpdateConferenceErrors[keyof ConferencesUpdateConferenceErrors];

export type ConferencesUpdateConferenceResponses = {
    /**
     * Successful Response
     */
    200: ConferencePublic;
};

export type ConferencesUpdateConferenceResponse = ConferencesUpdateConferenceResponses[keyof ConferencesUpdateConferenceResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};