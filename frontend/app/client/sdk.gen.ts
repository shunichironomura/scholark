// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { ConferencesReadConferencesData, ConferencesReadConferencesResponses, ConferencesReadConferencesErrors, ConferencesCreateConferenceData, ConferencesCreateConferenceResponses, ConferencesCreateConferenceErrors, ConferencesDeleteConferenceData, ConferencesDeleteConferenceResponses, ConferencesDeleteConferenceErrors, ConferencesReadConferenceData, ConferencesReadConferenceResponses, ConferencesReadConferenceErrors, ConferencesUpdateConferenceData, ConferencesUpdateConferenceResponses, ConferencesUpdateConferenceErrors, ConferencesAddTagToConferenceData, ConferencesAddTagToConferenceResponses, ConferencesAddTagToConferenceErrors, ConferencesUpdateTagsForConferenceData, ConferencesUpdateTagsForConferenceResponses, ConferencesUpdateTagsForConferenceErrors, ConferencesRemoveTagFromConferenceData, ConferencesRemoveTagFromConferenceResponses, ConferencesRemoveTagFromConferenceErrors, LoginLoginAccessTokenData, LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, LoginTestTokenData, LoginTestTokenResponses, UsersReadUsersData, UsersReadUsersResponses, UsersReadUsersErrors, UsersCreateUserData, UsersCreateUserResponses, UsersCreateUserErrors, UsersReadUserMeData, UsersReadUserMeResponses, UsersRegisterUserData, UsersRegisterUserResponses, UsersRegisterUserErrors, UsersDeleteUserData, UsersDeleteUserResponses, UsersDeleteUserErrors, UsersReadUserByIdData, UsersReadUserByIdResponses, UsersReadUserByIdErrors, TagsReadTagsData, TagsReadTagsResponses, TagsReadTagsErrors, TagsCreateTagData, TagsCreateTagResponses, TagsCreateTagErrors, TagsDeleteTagData, TagsDeleteTagResponses, TagsDeleteTagErrors, TagsReadTagData, TagsReadTagResponses, TagsReadTagErrors, TagsUpdateTagData, TagsUpdateTagResponses, TagsUpdateTagErrors, HealthHealthCheckData, HealthHealthCheckResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Conferences
 * Retrieve a list of conferences.
 */
export const conferencesReadConferences = <ThrowOnError extends boolean = false>(options?: Options<ConferencesReadConferencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConferencesReadConferencesResponses, ConferencesReadConferencesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/conferences/',
        ...options
    });
};

/**
 * Create Conference
 * Create a new conference.
 */
export const conferencesCreateConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesCreateConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConferencesCreateConferenceResponses, ConferencesCreateConferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/conferences/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Conference
 * Delete a conference by ID.
 */
export const conferencesDeleteConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesDeleteConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ConferencesDeleteConferenceResponses, ConferencesDeleteConferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/conferences/{conference_id}',
        ...options
    });
};

/**
 * Read Conference
 * Retrieve a conference by ID.
 */
export const conferencesReadConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesReadConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ConferencesReadConferenceResponses, ConferencesReadConferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/conferences/{conference_id}',
        ...options
    });
};

/**
 * Update Conference
 * Update a conference by ID.
 */
export const conferencesUpdateConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesUpdateConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ConferencesUpdateConferenceResponses, ConferencesUpdateConferenceErrors, ThrowOnError>({
        url: '/api/v1/conferences/{conference_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Tag To Conference
 * Add a tag to a conference.
 */
export const conferencesAddTagToConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesAddTagToConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConferencesAddTagToConferenceResponses, ConferencesAddTagToConferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/conferences/{conference_id}/tags',
        ...options
    });
};

/**
 * Update Tags For Conference
 * Update tags for a conference.
 */
export const conferencesUpdateTagsForConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesUpdateTagsForConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ConferencesUpdateTagsForConferenceResponses, ConferencesUpdateTagsForConferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/conferences/{conference_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Tag From Conference
 * Remove a tag from a conference.
 */
export const conferencesRemoveTagFromConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesRemoveTagFromConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ConferencesRemoveTagFromConferenceResponses, ConferencesRemoveTagFromConferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/conferences/{conference_id}/tags/{tag_id}',
        ...options
    });
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests.
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Test Token
 * Test access token.
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginTestTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/login/test-token',
        ...options
    });
};

/**
 * Read Users
 * Retrieve users.
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUsersResponses, UsersReadUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/',
        ...options
    });
};

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateUserResponses, UsersCreateUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(options: Options<UsersRegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersRegisterUserResponses, UsersRegisterUserErrors, ThrowOnError>({
        url: '/api/v1/users/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponses, UsersDeleteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponses, UsersReadUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Read Tags
 * Retrieve a list of tags.
 */
export const tagsReadTags = <ThrowOnError extends boolean = false>(options?: Options<TagsReadTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TagsReadTagsResponses, TagsReadTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/',
        ...options
    });
};

/**
 * Create Tag
 * Create a new tag.
 */
export const tagsCreateTag = <ThrowOnError extends boolean = false>(options: Options<TagsCreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TagsCreateTagResponses, TagsCreateTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Tag
 * Delete a tag.
 */
export const tagsDeleteTag = <ThrowOnError extends boolean = false>(options: Options<TagsDeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TagsDeleteTagResponses, TagsDeleteTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/{tag_id}',
        ...options
    });
};

/**
 * Read Tag
 * Retrieve a tag by ID.
 */
export const tagsReadTag = <ThrowOnError extends boolean = false>(options: Options<TagsReadTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagsReadTagResponses, TagsReadTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/{tag_id}',
        ...options
    });
};

/**
 * Update Tag
 * Update a tag.
 */
export const tagsUpdateTag = <ThrowOnError extends boolean = false>(options: Options<TagsUpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TagsUpdateTagResponses, TagsUpdateTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Health Check
 * Health check endpoint.
 */
export const healthHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthHealthCheckResponses, unknown, ThrowOnError>({
        url: '/api/v1/health/',
        ...options
    });
};