// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ConferencesReadConferencesData, ConferencesReadConferencesResponse, ConferencesReadConferencesError, ConferencesCreateConferenceData, ConferencesCreateConferenceResponse, ConferencesCreateConferenceError, ConferencesDeleteConferenceData, ConferencesDeleteConferenceResponse, ConferencesDeleteConferenceError, ConferencesReadConferenceData, ConferencesReadConferenceResponse, ConferencesReadConferenceError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Conferences
 * Retrieve a list of conferences.
 */
export const conferencesReadConferences = <ThrowOnError extends boolean = false>(options?: Options<ConferencesReadConferencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConferencesReadConferencesResponse, ConferencesReadConferencesError, ThrowOnError>({
        url: '/api/v1/conferences/',
        ...options
    });
};

/**
 * Create Conference
 * Create a new conference.
 */
export const conferencesCreateConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesCreateConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConferencesCreateConferenceResponse, ConferencesCreateConferenceError, ThrowOnError>({
        url: '/api/v1/conferences/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Conference
 * Delete a conference by ID.
 */
export const conferencesDeleteConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesDeleteConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ConferencesDeleteConferenceResponse, ConferencesDeleteConferenceError, ThrowOnError>({
        url: '/api/v1/conferences/{conference_id}',
        ...options
    });
};

/**
 * Read Conference
 * Retrieve a conference by ID.
 */
export const conferencesReadConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesReadConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ConferencesReadConferenceResponse, ConferencesReadConferenceError, ThrowOnError>({
        url: '/api/v1/conferences/{conference_id}',
        ...options
    });
};